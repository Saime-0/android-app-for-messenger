enum Action {
  ADD

  DEL
}

enum ActionType {
  READ

  WRITE
}

type AdvancedError {
  code: String!

  error: String!
}

input ByCreated {
  roomID: ID!

  startMsg: ID!

  created: MsgCreated!

  count: Int!
}

input ByRange {
  roomID: ID!

  start: ID!

  inDirection: ID!
}

input CreateMessageInput {
  roomID: ID!

  targetMsgID: ID

  body: String!
}

type DropRoom {
  roomID: ID!
}

type DropTag {
  tagID: ID!
}

union EditListenEventCollectionResult = AdvancedError|ListenCollection

type EmpTagAction {
  action: Action!

  empID: ID!

  tagIDs: [ID!]!
}

type Employee {
  empID: ID!

  firstName: String!

  lastName: String!

  email: String!

  phoneNumber: String!

  tags: Tags!
}

type Employees {
  employees: [Employee!]!
}

union EmployeesResult = AdvancedError|Employees

union EventResult = NewMessage|DropTag|EmpTagAction|MemberAction|DropRoom|TokenExpired

enum EventSubjectAction {
  ADD

  DELETE
}

enum EventType {
  all

  NewMessage

  DropTag

  EmpTagAction

  MemberAction

  DropRoom

  TokenExpired
}

enum FetchType {
  POSITIVE

  NEUTRAL

  NEGATIVE
}

input FindEmployees {
  empID: ID

  roomID: ID

  tagID: ID

  name: String
}

input FindMessages {
  msgID: ID

  empID: ID

  roomID: ID

  targetID: ID

  textFragment: String
}

input FindRooms {
  roomID: ID

  name: String
}

scalar HexColor

scalar Int64

type ListenCollection {
  sessionKey: String!

  success: String!

  collection: [ListenedChat!]!
}

type ListenedChat {
  id: ID!

  events: [EventType!]!
}

input LoginInput {
  email: String!

  password: String!
}

union LoginResult = AdvancedError|TokenPair

type Me {
  employee: Employee!

  rooms(params: Params!): Rooms!
}

union MeResult = AdvancedError|Me

type Member {
  employee: Employee!

  room: Room!
}

type MemberAction {
  action: Action!

  empID: ID!

  roomIDs: [ID!]!
}

type Members {
  members: [Member!]!
}

type Message {
  room: Room!

  msgID: ID!

  next: ID

  prev: ID

  employee: Employee

  targetMsg: Message

  body: String!

  createdAt: Int64!
}

type Messages {
  messages: [Message!]!
}

union MessagesResult = AdvancedError|Messages

union MoveRoomResult = AdvancedError|Successful

enum MsgCreated {
  AFTER

  BEFORE
}

type Mutation {
  login(input: LoginInput!): LoginResult!

  moveRoom(roomID: ID!, prevRoomID: ID): MoveRoomResult!

  readMsg(roomID: ID!, msgID: ID!): ReadMsgResult!

  refreshTokens(sessionKey: String, refreshToken: String!): RefreshTokensResult!

  sendMsg(input: CreateMessageInput!): SendMsgResult!

  setNotify(roomID: ID!, value: Boolean!): SetNotifyResult!

  editListenEventCollection(sessionKey: String!, action: EventSubjectAction!, targetRooms: [ID!]!, listenEvents: [EventType!]!): EditListenEventCollectionResult!
}

union MutationResult = AdvancedError|Successful

type NewMessage {
  msgID: ID!

  roomID: ID!

  targetMsgID: ID

  employeeID: ID

  body: String!

  createdAt: Int64!

  prev: ID
}

input Params {
  limit: Int

  offset: Int
}

type PersonalData {
  email: String!

  phoneNumber: String!
}

type Query {
  employees(find: FindEmployees!, params: Params): EmployeesResult!

  me: MeResult!

  messages(find: FindMessages!, params: Params): MessagesResult!

  roomMessages(byCreated: ByCreated, byRange: ByRange): MessagesResult!

  rooms(find: FindRooms!, params: Params): RoomsResult!

  tags(tagIDs: [Int!], params: Params): TagsResult!
}

union ReadMsgResult = AdvancedError|Successful

union RefreshTokensResult = AdvancedError|TokenPair

union RegisterResult = AdvancedError|Successful

type Room {
  pos: Int!

  roomID: ID!

  name: String!

  view: RoomType!

  lastMessageRead: ID

  lastMessageID: ID

  notify: Boolean!

  members: Members!
}

enum RoomType {
  TALK

  BLOG
}

type Rooms {
  rooms: [Room!]!
}

union RoomsResult = AdvancedError|Rooms

union SendMsgResult = AdvancedError|Successful

union SetNotifyResult = AdvancedError|Successful

type Subscription {
  subscribe(sessionKey: String!): SubscriptionBody
}

type SubscriptionBody {
  event: EventType!

  body: EventResult!
}

type Successful {
  success: String!
}

type Tag {
  tagID: ID!

  name: String!
}

type Tags {
  tags: [Tag!]!
}

union TagsResult = AdvancedError|Tags

type TokenExpired {
  message: String!
}

type TokenPair {
  accessToken: String!

  refreshToken: String!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
